######################################################################
#
#       Copyright (C) 2001-2005 Nathan Fiedler
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# $Id$
#
######################################################################

######################################################################
#               Common Command Messages
######################################################################

badLineNumber = Missing or invalid line number specification.
classNotFound = Class not found:
classNotPrepared = Class not prepared, ignoring command.
couldntOpenFileMsg = Could not open source file.
couldntMapSrcFile = Source for class not found. Check sourcepath.
evalError = Evaluation error:
fieldNotFound = Referenced field was not found
fieldNotObject = Expression does not refer to an object reference.
incorrectSyntax = Incorrect syntax for this command.
invalidClassName = Invalid or unknown class name
invalidBreakpoint = Invalid breakpoint number.
invalidMethod = Invalid method specification
invalidStackFrame = Invalid stack frame index.
invalidThreadID = Invalid or unknown thread identifier.
nativeMethod = Native method, no information available.
noActiveSession = No active debugging session. Command ignored.
noCurrentLocation = No current location; is debuggee suspended?
noCurrentThread = No current thread. Set current thread with 'thread' command.
noVariableInfo1 = There is no variable information for this class.
noVariableInfo2 = Make sure to compile your classes with 'javac -g'.
objectCollected = Object has been garbage collected. No information available.
threadNotFound = Thread not found:
threadNotRunning = Thread was not running (it has no stack).
threadNotSuspended = Thread is not suspended.
threadStatusCollected = (collected)
threadStatusMonitor = MONITOR
threadStatusNotStarted = NOT_STARTED
threadStatusRunning = RUNNING
threadStatusSleeping = SLEEPING
threadStatusUnknown = UNKNOWN
threadStatusWait = WAIT
threadStatusZombie = ZOMBIE

######################################################################
#               CommandManager resources
######################################################################

# Printed from 'unalias' when argument not found.
CommandManager.aliasNotFound = Alias not found.

# Printed from 'unalias' when argument was removed.
CommandManager.aliasRemoved = Alias removed.

# Displayed when an ambiguous command prefix was entered by the user.
CommandManager.ambiguousMatch = Ambiguous command prefix:

CommandManager.bangNotAllowed = ! and !! are not allowed in scripts.

# JSwat attempted to create a command object but failed.
CommandManager.cantInstantiateCommand = Command could not be instantiated:

# User entered an unknown command.
CommandManager.commandNotFound = Command not found:

# The properties file is missing the 'commands' list.
CommandManager.errorCommandList = Internal error: 'commands' list missing

# Command could not be found by the CommandManager.
CommandManager.errorCommandLoad = (Could not load command)

# CommandManager could not find the script file.
CommandManager.errorReadingFile = Error reading file:

CommandManager.errorReadingAliases = Unable to read command aliases.

# Failed to run a user-invoked command.
CommandManager.errorRunningCommand = Error while running command.

CommandManager.fileNotFound = File not found

# Displayed at top of command history list.
CommandManager.historyHeader = Command history:

# User tried to use ! but jswat couldn't find a matching command
# in the history chain.
CommandManager.historyNotFound = No matching command found in history.

# Displayed at top of command aliases list.
CommandManager.listOfAliases = List of command aliases:

# Displayed at top of command list.
CommandManager.listOfCommands = List of supported commands:

CommandManager.missingArguments = Missing required command arguments.

CommandManager.noAliases = No aliases have been defined.
CommandManager.noHistory = No commands in history.

# User entered an unknown command, tell them how to get help.
CommandManager.useHelpCommands = Use 'help commands' for more information.

#
# List of available JSwat commands. These are used in the 'help commands'
# function. If a command is not listed here it can still be invoked, but
# it will not be listed as an available command.
#
# Please keep the list in alphabetical order.
#
commandList = \
        about alias apropos attach brkinfo brkmon bytecodes capture \
        catch class classbrk classes classpath clear close condition \
        copysession disable disablegc down dump elements enable enablegc \
        exclude exit fields filter frame help history hotswap \
        interrupt invoke kill lines list listen load loadsession \
        locals locks logging methods monitor next nexti options print \
        props read refresh resume rmsession run runto set source sourcepath \
        stderr stdin stdout step stepi stop support suspend thread \
        threadbrk threadgroups threadlocks threads trace unalias \
        unmonitor up version view vminfo watch where

######################################################################
#               List of Command Descriptions
######################################################################

aboutDesc = Shows the about information for JSwat.
aliasDesc = Create a command alias, or display alias definitions.
aproposDesc = Searches the command descriptions for keywords.
attachDesc = Attach remotely to a running VM.
brkinfoDesc = Show information regarding a breakpoint.
brkmonDesc = Add or remove monitors from breakpoints.
bytecodesDesc = Display bytecodes for methods.
captureDesc = Control the capture of JSwat messages to alternative locations.
catchDesc = Break when the specified exception is thrown.
classDesc = Display information about a class or interface.
classbrkDesc = Stop when a class is prepared or unloaded.
classesDesc = List classes loaded in the debuggee VM.
classpathDesc = Displays or sets the classpath of the debuggee VM.
clearDesc = Clear a breakpoint.
closeDesc = Closes the currently active debugging session.
conditionDesc = Add or remove conditions from breakpoints.
copysessionDesc = Copies the current session settings to a new name.
disableDesc = Disables a breakpoint.
disablegcDesc = Disables garbage collection for an object.
downDesc = Move down the stack frame.
dumpDesc = Prints all fields of an object.
elementsDesc = Displays elements of arrays, maps, and collections.
enableDesc = Enables a breakpoint.
enablegcDesc = Enables garbage collection for an object.
excludeDesc = Sets the single stepping class exclusions.
exitDesc = Exits the program (typically; see help for details).
fieldsDesc = Print names of data members of a class.
filterDesc = Adds or removes a filter from a breakpoint.
frameDesc = Set the current stack frame.
helpDesc = Explains how to use JSwat commands.
historyDesc = Shows a command history.
hotswapDesc = Redefine classes at runtime.
interruptDesc = Interrupts a given thread.
invokeDesc = Invoke a method on an object or class.
killDesc = Terminate the debuggee VM.
linesDesc = Print the line numbers of a method.
listDesc = Lists source code at the current stepping location.
listenDesc = Listens for a connection from a debuggee VM.
loadDesc = Start a suspended VM to be debugged.
loadsessionDesc = Opens or creates a new set of session settings.
localsDesc = Display visible local variables and field variables.
locksDesc = Display monitor and waiting thread information for.
loggingDesc = Enable or disable logging output by category.
methodsDesc = List methods of a class.
monitorDesc = Create monitors to be executed whenever debuggee stops.
nextDesc = Step one line, stepping over method calls.
nextiDesc = Step one instruction, stepping over method calls.
optionsDesc = Show and modify program options.
printDesc = Evaluate an expression and print the result.
propsDesc = Display and modify session property values.
readDesc = Executes the commands in the given command file.
refreshDesc = Refresh the panels and source views.
resumeDesc = Resume execution of one or all threads.
rmsessionDesc = Deletes the named set of session settings.
runDesc = Start a VM to be debugged and immediately start it.
runtoDesc = Sets a temporary breakpoint and resumes execution.
setDesc = Changes the value of a variable.
sourceDesc = Displays source file related information for a class.
sourcepathDesc = Displays or sets the source path.
stderrDesc = Prints a message to standard error of the JSwat JVM.
stdinDesc = Sends text to the debuggee VM's standard input stream.
stdoutDesc = Prints a message to standard output of the JSwat JVM.
stepDesc = Execute a single line, stepping into methods.
stepiDesc = Execute a single instruction, stepping into methods.
stopDesc = Set a breakpoint at some location.
supportDesc = Shows support for optional features in the debuggee.
suspendDesc = Suspend execution of one or all threads.
threadDesc = Set the current thread.
threadbrkDesc = Stop when a thread is started or has died.
threadgroupsDesc = List all known thread groups.
threadlocksDesc = Display thread lock information.
threadsDesc = List all threads in the VM or the threads in a group.
traceDesc = Trace method entry and exit events.
unaliasDesc = Remove a command alias.
unmonitorDesc = Remove previously defined monitors.
upDesc = Move up the stack frame.
versionDesc = Display version information.
viewDesc = View the contents of a source file.
vminfoDesc = Displays information about the debuggee VM.
watchDesc = Stop when a variable is accessed or modified.
whereDesc = Displays the call stack of a thread.

######################################################################
#               Command Help Strings
######################################################################

aliasHelp = Syntax: alias [<name> [<command-string>]]\n\
Subsequent uses of 'name' will invoke 'command-string'.\n\
With no arguments, shows all defined aliases.\n\
With one argument, shows the named alias's definition.\n\
\n\
Examples:\n\
\talias ali1 cmd arg1 arg2\n\
\talias ali2 cmd "argument;with;semicolons"\n\
\talias mymacro "cmd1 ; cmd2 ; cmd3"\n\
\n\
See also: unalias

######################################################################
aproposHelp = Syntax: apropos <regex>\n\
Searches the command descriptions for the given regular expression\n\
and displays matching commands and their descriptions.\n\
See java.util.regex.Pattern to learn about regular expressions.\n\
\n\
See also: 'help commands'

######################################################################
attachHelp = Syntax: attach [[<host>:]<port>]|[<share_name>]\n\
Attaches to the debuggee VM running at the given address.\n\
With no arguments, attaches using the previously set parameters.\n\
If the [<host>:]<port> form is used, connects via socket.\n\
If no host value is given, 'localhost' is assumed.\n\
If the <share_name> form is used, connects via shared memory.\n\
\n\
Examples:\n\
> attach rhost:1234  (attaches to rhost at port 1234)\n\
> attach 1234        (attaches to localhost at port 1234)\n\
> attach javadebug   (attaches using shared memory name)\n\
> attach             (attaches with the last used parameters)\n\
\n\
See also: close, kill

######################################################################
brkinfoHelp = Syntax: brkinfo [<brknum>]\n\
Shows the properties for the breakpoint given by 'brknum'.\n\
With no argument, shows list of breakpoints.\n\
\n\
See also: condition, disable, enable, filter, monitor

######################################################################
brkmonHelp = Syntax: brkmon add|del "<command>" <brk-num>\n\
Actions are:\n\
\n\
'add' - adds a new monitor to the breakpoint.\n\
'del' - removes an existing monitor from the breakpoint.\n\
\n\
The "command" argument must be a valid command input string,\n\
with a command and any required or optional command arguments.\n\
The breakpoint number specifies the breakpoint to which\n\
the monitor is added or removed.\n\
\n\
See also: clear, disable, enable, stop

######################################################################
bytecodesHelp = Syntax: bytecodes [<class> <method>]\n\
'class' is the fully-qualified name of the desired class.\n\
'method' is the name of the desired method (may be overloaded).\n\
\n\
With no arguments, command displays the bytecodes of the method\n\
at the current location, if set.\n\
\n\
If the command cannot load the .class file for the target class, it\n\
will retrieve the method bytecodes through JDI. However, the results\n\
are prone to error since jclasslib requires the entire class file\n\
to produce accurate results. Additionally, the debuggee JVM must\n\
support retrieving method bytecodes.\n\
\n\
See also: classes, methods

######################################################################
captureHelp = Syntax: capture [[+|-]stdout] [[+|-]file <name>]\n\
By default, toggle the capture of messages to the given alternative\n\
locations. If a + prefix is given, enable the location; if a - prefix\n\
is given, disable the location. With no arguments, displays the\n\
locations and their enabled state.\n\
\n\
Examples:\n\
\tcapture\n\
\tcapture stdout\n\
\tcapture +stdout\n\
\tcapture -stdout +file msgs.txt

######################################################################
catchHelp = Syntax: catch [go|thread] <exception>\n\
Use 'clear' command to remove the exception catch.\n\
The 'go' and 'thread' options control which threads in the VM\n\
are suspended when the event occurs. 'go' suspends no threads,\n\
and 'thread' suspends only the event thread.\n\
The default is for all threads in the debuggee to suspend.\n\
\n\
See also: clear

######################################################################
classHelp = Syntax: class [all] <regex>\n\
The <regex> specifies the name of the class or classes to display.\n\
The 'all' option shows all superclasses and their interfaces.\n\
See java.util.regex.Pattern to learn about regular expressions.\n\
\n\
See also: classes, source

######################################################################
classbrkHelp = Syntax: classbrk [go|thread] <class>|all\n\
The 'go' and 'thread' options control which threads in the VM\n\
are suspended when the event occurs. 'go' suspends no threads,\n\
and 'thread' suspends only the event thread.\n\
The default is for all threads in the debuggee to suspend.\n\
\n\
The <class> filter controls which classes halt execution.\n\
The filter can be wild-carded to match more than one class,\n\
for example "java.lang.*" or "*Shape".\n\
The 'all' keyword indicates to watch all classes. This is not\n\
recommended as it is rather slow.\n\
\n\
See also: clear

######################################################################
classesHelp = Syntax: classes [<regex>]\n\
Lists classes matching the given regular expression.\n\
Shows the classloader class and unique ID of the loader instance
for each matching class.\n\
See java.util.regex.Pattern to learn about regular expressions.\n\
\n\
See also: class

######################################################################
classpathHelp = Syntax: classpath ["<path>"]\n\
Path may contain multiple entries, separated by : or ;.\n\
The use of : or ; depends on your operating system.\n\
Without the path argument, prints the current class path.\n\
The <path> can be relative to the current working directory.\n\
\n\
Examples:\n\
\tclasspath "/home/me/java"\n\
\tclasspath "c:\classes;d:\more.jar"\n\
\n\
See also: sourcepath

######################################################################
clearHelp = clear <n> ...|all\n\
With one or more breakpoint number arguments, deletes the given\n\
breakpoints. With 'all' argument, removes all breakpoints.\n\
\n\
See also: brkinfo, disable, enable, stop

######################################################################
closeHelp = Syntax: close\n\
If the session launched the debuggee VM, the VM is terminated.\n\
If the session is a connected to a remote debuggee, the connection\n\
is closed and the remote debuggee VM is left running.\n\
\n\
See also: kill

######################################################################
conditionHelp = Syntax: condition add|del "<conditional>" <brk-num>\n\
\n\
Actions are:\n\
'add' - adds a new condition to the breakpoint.\n\
'del' - removes an existing condition from the breakpoint.\n\
\n\
The conditional is any boolean expression, using the\n\
==, !=, <, >, <=, >=, &&, and || boolean operators.\n\
\n\
The breakpoint number specifies the breakpoint to which\n\
the condition is added or removed.\n\
\n\
See also: brkinfo, clear, disable, enable, stop

######################################################################
copysessionHelp = Syntax: copysession [<name>]\n\
Copies the current session settings to a new set of the given name.\n\
\n\
With no arguments, displays the names of the available settings.

######################################################################
disableHelp = disable <n> ...|all\n\
With one or more breakpoint number arguments, disables the given\n\
breakpoints. With 'all' argument, disables all breakpoints.\n\
\n\
See also: brkinfo, clear, enable, stop

######################################################################
disablegcHelp = Syntax: disablegc <object-expr>\n\
The <object-expr> is an expression specifying an object.\n\
\n\
See also: enablegc

######################################################################
downHelp = Syntax: down [<n-frames>]\n\
With no argument, moves down the stack by one frame.\n\
\n\
See also: up, frame

######################################################################
dumpHelp = Syntax: dump <object-expr>\n\
The <object-expr> is an expression specifying an object.\n\
\n\
See also: print

######################################################################
elementsHelp = Syntax: elements [<start> [<end>]] <expr>\n\
\n\
Evaluates the expression expecting an array, Map, or\n\
Collection instance.\n\
Displays the elements between start and end (inclusive).\n\
Defaults start to zero and end to the end of the collection.\n\
\n\
See also: dump, print

######################################################################
enableHelp = enable <n> ...|all\n\
With one or more breakpoint number arguments, enables the given\n\
breakpoints. With 'all' argument, enables all breakpoints.\n\
\n\
See also: brkinfo, clear, disable, stop

######################################################################
enablegcHelp = Syntax: enablegc <object-expr>\n\
The <object-expr> is an expression specifying an object.\n\
\n\
See also: disablegc

######################################################################
excludeHelp = exclude [-] [<class-expr>]\n\
With no arguments, displays the list of classes which will\n\
not be stepped into.\n\
Without the '-', adds a class specifier to the exclusion list.\n\
With the '-', removes a class specifier from the exclusion list.\n\
<class-expr> must be a legal class specifier, optionally\n\
beginning or ending with a '*' wildcard.\n\
For example, "*.Foo" or "java.*".\n\
\n\
See also: classes

######################################################################
exitHelp = exit\n\
\n\
Closes the active session, following the 'close' command protocol,\n\
then terminates JSwat if there are no more open sessions.\n\
\n\
See also: close

######################################################################
fieldsHelp = Syntax: fields <regex>\n\
The <regex> is a regular expression to match one or more class names.\n\
See java.util.regex.Pattern to learn about regular expressions.\n\
\n\
See also: classes, methods

######################################################################
filterHelp = Syntax: filter add|del <brknum> thread <thread-id>\n\
\tAdds or removes a thread filter from the given breakpoint.\n\
Syntax: filter add|del <brknum> class <class>\n\
\tAdds or removes a class filter from the given breakpoint.\n\
Location breakpoints cannot have class filters.\n\
\n\
See also: brkinfo, stop

######################################################################
frameHelp = Syntax: frame <n>\n\
The <n> value must be between one and the frame count, inclusive.\n\
\n\
See also: up, down

######################################################################
helpHelp = Basic command information:\n\
\thelp commands   displays list of commands and their descriptions.\n\
\thelp <command>  displays help for the given command.\n\
\thelp <topic>    displays help for the named topic.\n\
\thelp            enter interactive help browsing mode.

######################################################################
historyHelp = Syntax: history [<num>]\n\
Displays the recent command history.\n\
With an argument in the form of a natural number between 0 and 1000,\n\
sets the history size limit to that value.\n\
\n\
See also: 'help help'

######################################################################
hotswapHelp = Syntax: hotswap <class-name> [<file.class>]\n\
\n\
Redefines the byte-code of a class in the debuggee.\n\
If the .class filename is not given, the command will try\n\
to guess the location of the class file based on the\n\
fully-qualified class name. If this fails, reinvoke the\n\
command with the .class filename.\n\
\n\
Breakpoints in a redefined class will be invalidated for\n\
the remainder of the active session. As a work-around,\n\
disable and re-enable the breakpoints.\n\
\n\
Source views may be out of date if the source has been\n\
changed since the session was activated. Use the 'refresh'\n\
command to cause the source views to reload.\n\
\n\
(from the JDI documentation)\n\
This function does not cause any initialization except\n\
that which would occur under the customary JVM semantics.\n\
In other words, redefining a class does not cause its\n\
initializers to be run. The values of preexisting static\n\
variables will remain as they were prior to the call.\n\
However, completely uninitialized (new) static variables\n\
will be assigned their default value.\n\
\n\
If a redefined class has instances then all those\n\
instances will have the fields defined by the redefined\n\
class at the completion of the call. Preexisting fields\n\
will retain their previous values. Any new fields will\n\
have their default values; no instance initializers or\n\
constructors are run.\n\
\n\
Some JVMs do not offer unrestricted class redefinition.\n\
Restricted class redefinition disallows the following:\n\
+ changing the schema (the fields)\n\
+ changing the hierarchy (subclasses, interfaces)\n\
+ deleting a method\n\
+ changing class modifiers\n\
+ changing method modifiers\n\
\n\
(yet more information from Sun)\n\
If a method that gets modified by a redefineClasses operation\n\
has current activations, those activations will continue to\n\
execute the old version of the method. New calls will get the\n\
new version of the method.\n\
\n\
In this case, all information about the old version of the\n\
method (eg, its local variables, line numbers, ...) is lost\n\
and cannot be recovered by the JDI client. All operations that\n\
return information about the method will return information\n\
about the new version of the method. Breakpoints that are set\n\
in the method will be set in the new version, not the old\n\
version.\n\
\n\
See also: classes

######################################################################
interruptHelp = Syntax: interrupt <thread-id>

######################################################################
invokeHelp = Syntax: invoke [objvar.|class.]method([args...])\n\
\n\
The 'objvar' value is an object referenced by the named variable.\n\
The 'class' value is a fully-qualified class name.\n\
Both 'objvar' and 'class' are optional -- without them, invoke\n\
calls upon the class containing the current location.\n\
\n\
The arguments may be any valid Java expression, as described\n\
in the print command help.\n\
Invoke will display the return value of the method, if any.\n\
The current thread must be suspended due to a breakpoint.\n\
\n\
Examples:\n\
\tinvoke obj1.setValues("string", 123 * 4)\n\
\tinvoke java.lang.String.valueOf(var1)\n\
\tinvoke localMethod(a == b, null)\n\
\tinvoke java.lang.System.gc()\n\
\n\
See also: classes, methods, print

######################################################################
killHelp = Syntax: kill\n\
\n\
See also: close, suspend, resume

######################################################################
linesHelp = Syntax: lines <class> [<method>] [<loader-id>]\n\
Shows the line numbers of executable code within the named class.\n\
With the optional <method>, displays lines in that method only.\n\
Shows the class loader classname and unique ID of that instance\n\
before each instance of the class.\n\
With the optional <loader-id>, shows only matching classes loaded by\n\
the class loader with the given unique identifier (a long value).\n\
\n\
See also: classes, methods

######################################################################
listHelp = Syntax: list [center] [count <lines>] [<line>]\n\
If 'center' is given, shows source code around the current\n\
location, rather than the code following that location.\n\
If 'count' is given, the following number indicates the number\n\
of lines to be shown.\n\
If the line argument is given, displays source code following\n\
that line, instead of using the current stepping line number.\n\
\n\
See also: view

######################################################################
listenHelp = Syntax: listen [<port>]|[<share_name>]\n\
With no arguments, listens using a socket connector on\n\
a port determined by the debugger.\n\
With the <port> form, makes a socket connector on that port.\n\
With the <share_name> form, makes a shared memory connector.\n\
The output from 'listen' will indicate the address at which\n\
the remote VM should connect.\n\
\n\
See also: attach, load, run

######################################################################
loadHelp = Syntax: load [<jvm args>] [<classname> [<class args>]]\n\
With no arguments, restarts the debuggee using the previously\n\
set parameters. The classname, if any, must be fully qualified.\n\
Arguments preceding the classname are passed to the debuggee VM.\n\
Arguments following the classname are passed to the class itself.\n\
The classname argument may be substituted with the path to a jar\n\
file. The jar's manifest must contain the Main-Class attribute.\n\
\n\
See also: close, kill, run

######################################################################
loadsessionHelp = Syntax: loadsession [<name>]\n\
Loads the named set of session settings, replacing the current set.\n\
\n\
With no arguments, displays the names of the available settings.

######################################################################
localsHelp = Syntax: locals [<frame-number>]\n\
Displays a frame's visible local variables.\n\
Defaults to the current stack frame.\n\
\n\
See also: fields, print

######################################################################
locksHelp = Syntax: locks <object-expr>\n\
The <object-expr> is an expression specifying an object.\n\
\n\
See also: dump

######################################################################
loggingHelp = Syntax: logging [[+|-]<category> ...]\n\
By default, toggle the enabled state of the named logging category.\n\
If a + prefix is given, enable the category; if a - prefix is given,\n\
disable the category. With no arguments, displays the category names\n\
and their enabled state.\n\
\n\
Examples:\n\
\tlogging\n\
\tlogging session\n\
\tlogging +session\n\
\tlogging -session +breakpoint

######################################################################
methodsHelp = Syntax: methods <class-name>\n\
List the methods of the class by the given name.\n\
\n\
See also: classes

######################################################################
monitorHelp = Sytnax: monitor [<monitor-definition>]\n\
\n\
Creates a monitor that is executed when the debuggee is\n\
paused for any reason. The monitor definition is just\n\
like an alias definition. It can refer to aliases and\n\
contain multiple commands, separated semicolons (;).\n\
\n\
With no argument, displays a list of the defined monitors.\n\
\n\
See also: brkmon, unmonitor

######################################################################
nextHelp = Syntax: next [thread]\n\
Steps a single line of code, stepping over method calls.\n\
Use 'thread' to suspend only the event thread.\n\
\n\
See also: nexti, step, stepi

######################################################################
nextiHelp = Syntax: nexti [thread]\n\
Steps a single instruction, stepping over method calls.\n\
Use 'thread' to suspend only the event thread.\n\
\n\
See also: next, step, stepi

######################################################################
optionsHelp = Syntax: options [<option-name> <value>]\n\
Without arguments, 'options' will show the list of options.\n\
With arguments, 'options' will set an option's value.

######################################################################
printHelp = Syntax: print <expr>\n\
Evalutes the given expression and displays the result.\n\
If the result is a byte or char array, it is converted\n\
to a string using the default encoding (for the JSwat JVM).\n\
\n\
The expression can be any valid Java expression, with the\n\
following exceptions:\n\
\tThe 'super' keyword is not supported.\n\
\tExpressions like "abc".length() are not supported.\n\
\tThe conditional operator (?:) is not supported.\n\
\n\
Variable references, method invocations, and some type-casts\n\
only work when the debuggee is active and the current location\n\
has been set, as with a breakpoint or the 'thread' and 'frame'\n\
commands.\n\
\n\
Some examples of valid expressions:\n\
\tprint var\n\
\tprint 1 + 1\n\
\tprint m * c ^ 2\n\
\tprint var + arr[i + 2] * 3\n\
\tprint arr[3].field\n\
\tprint meth(123, "abc", var, true);\n\
\tprint meth2((short) 123, (Number) num1);\n\
\n\
See also: dump, elements, invoke

######################################################################
propsHelp = Syntax: props [<name> <value>]\n\
\n\
With no arguments, displays the session property values.\n\
With two arguments, sets the named session property value.\n\
If the <value> argument is 'NULL', the named property is deleted.

######################################################################
readHelp = Syntax: read <filename>\n\
Aliases may be used in scripts, but not ! or !!.

######################################################################
refreshHelp = Syntax: refresh\n\
Updates the panels and views. Causes the source views to reload.

######################################################################
resumeHelp = Syntax: resume [all|<thread-id> ...]\n\
Resumes execution of threads (default is all).\n\
Resume can take several thread IDs at a time, space separated.\n\
\n\
See also: suspend

######################################################################
rmsessionHelp = Syntax: rmsession [<name>]\n\
Deletes the named set of session settings. Automatically opens the\n\
'default' settings. If the default set is deleted, it is recreated.\n\
\n\
With no arguments, displays the names of the available settings.

######################################################################
runHelp = Syntax: run [<classname> [<args>]]\n\
With no arguments, run re-executes the previously loaded class.\n\
Otherwise the given classname must be fully qualified.\n\
Arguments following the classname are passed to the class itself.\n\
\n\
See also: close, load

######################################################################
runtoHelp = runto [<class id>:]<line>\n\
\tSets breakpoint in class at specified source line and resumes.\n\
\tThe class id is optional if current location is set.\n\
\n\
runto [<class id>.]<method>([argument_type,...])\n\
\tSets breakpoint in class at specified method and resumes.\n\
\tThe class id is optional if current location is set.\n\
\n\
See also: stop

######################################################################
setHelp = Syntax: set <lvalue> = <rvalue>\n\
\n\
'lvalue' must be a variable visible in the current stack frame.\n\
'rvalue' may be any Java expression, as described in the print\n\
command help.\n\
The spaces around the equals sign are required.\n\
Invocation, like so, with one quoted argument is illegal:\n\
\tset "lvalue = rvalue"\n\
\n\
See also: print

######################################################################
sourceHelp = Syntax: source <regex>\n\
The <regex> specifies the name of the class or classes to display.\n\
See java.util.regex.Pattern to learn about regular expressions.\n\
\n\
See also: class

######################################################################
sourcepathHelp = Syntax: sourcepath ["<path>"]\n\
Path may contain multiple entries, separated by : or ;.\n\
The use of : or ; depends on your operating system.\n\
Without the optional path, prints the current source path.\n\
\n\
Examples:\n\
\tsourcepath "/home/me/java"\n\
\tsourcepath "c:\classes;d:\more.jar"\n\
\n\
See also: classpath

######################################################################
stderrHelp = Syntax: stderr [message]\n\
Sends the message (as-is) to the standard error stream of JSwat.\n\
\n\
See also: stdout

######################################################################
stdinHelp = Syntax: stdin <input>\n\
Sends the input (as-is) to the debuggee's stardard input stream.

######################################################################
stdoutHelp = Syntax: stdout [message]\n\
Sends the message (as-is) to the standard output stream of JSwat.\n\
\n\
See also: stderr

######################################################################
stepHelp = Syntax: step [out|up] [thread]\n\
Steps a single line of code.\n\
Use 'out' or 'up' to leave the current function.\n\
Use 'thread' to suspend only the event thread.\n\
\n\
See also: stepi, next, nexti

######################################################################
stepiHelp = Syntax: stepi [thread]\n\
Steps a single instruction.\n\
Use 'thread' to suspend only the event thread.\n\
\n\
See also: step, next, nexti

######################################################################
stopHelp = Syntax (1): stop [go|thread] [<class>:]<line>\n\
\tSets breakpoint in class at specified source line.\n\
\tThe class is optional if the current location is set.\n\
\tExamples:\n\
\t\tstop pkg.MyClass:123\n\
\t\tstop OtherClass:321\n\
\t\tstop 200\n\
\n\
Syntax (2): stop [go|thread] [<class>.]<method>([<arg-list>])\n\
\tSets breakpoint in class at specified method.\n\
\tThe class is optional if the current location is set.\n\
\tArgument list consists of primitives and class names,\n\
\tseparated by commas. Classes in 'java.lang' are matched\n\
\tautomatically when not fully-qualified.\n\
\tExamples:\n\
\t\tstop pkg.MyClass.doIt(int[])\n\
\t\tstop OtherClass.doIt(boolean, String, java.net.URL)\n\
\t\tstop doIt\n\
\n\
The 'go' and 'thread' options control which threads in the VM\n\
are suspended when the event occurs. 'go' suspends no threads,\n\
while 'thread' causes only the event thread to stop.\n\
The default is for all threads in the debuggee to suspend.\n\
\n\
See also: brkinfo, brkmon, clear, condition, disable, enable, filter

######################################################################
supportHelp = Syntax: support\n\
Shows the level of support for various optional features in the\n\
debuggee JVM. If certain features are not available, then some\n\
features of JSwat will not be available. Here is a list of the\n\
features and how their absence affects JSwat:\n\
\n\
Cannot add method: hotswap cannot add methods to classes.\n\
Cannot get bytecodes: bytecodes command may not work.\n\
Cannot (unrestrictedly) redefine classes: limited or no hotswap support.\n\
Cannot watch fields: no watchpoints or watch panel, at all.\n\
Cannot use instance filters: no watchpoints or watch panel support\n\
\tfor watching fields of individual objects, only static fields.

######################################################################
suspendHelp = Syntax: suspend [all|<thread-id> ...]\n\
Suspends execution of threads (default is all).\n\
Suspend can take several thread IDs at a time, space separated.\n\
\n\
See also: resume

######################################################################
threadHelp = Syntax: thread [<thread-id>]\n\
With no argument, shows thread set as the current one.\n\
With argument, sets the current thread.\n\
\n\
See also: threads, threadgroups

######################################################################
threadbrkHelp = Syntax: threadbrk [go|thread] [name] [start|death]\n\
Sets a breakpoint to halt execution when a thread is started\n\
or has died. The optional name acts as a filter, stopping\n\
only when a thread of the given name starts or dies.\n\
\n\
The 'go' and 'thread' options control which threads in the VM\n\
are suspended when the event occurs. 'go' suspends no threads,\n\
while 'thread' causes only the event thread to stop.\n\
The default is for all threads in the debuggee to suspend.\n\
\n\
If 'start' is given, stops only when a thread is about to start.\n\
If 'death' is given, stops only when a thread is about to die.\n\
\n\
See also: clear

######################################################################
threadlocksHelp = Syntax: threadlocks [<thread-id>|all]\n\
With no argument, displays lock info for current thread.\n\
With 'all' argument, displays lock info for all threads.\n\
With id argument, displays lock info for given thread.\n\
\n\
See also: threads

######################################################################
threadsHelp = Syntax: threads [<group-name>|<group-id>|<regex>]\n\
Shows all threads in the identified thread group. The group can be\n\
identified by a group name, group ID, or a regular expression of\n\
either the name or the ID. See java.util.regex.Pattern to learn\n\
about regular expressions.\n\
\n\
If no argument is given, shows all threads in the debuggee.\n\
\n\
The current thread is indicated with a '*'.\n\
\n\
See also: thread, threadgroups, threadlocks

######################################################################
threadgroupsHelp = Syntax: threadgroups\n\
Subgroups are indented two spaces, to indicate the relationship\n\
between the thread groups.\n\
\n\
See also: thread, threads, threadlocks

######################################################################
traceHelp = Syntax: trace <class>|all [<thread-id>]\n\
Displays a message every time any method is entered or exited.\n\
With <class> filter, only methods in the matching class(es)\n\
are shown. The <class> argument can be wild-carded to match\n\
more than one class, for example "java.lang.*" or "*Shape".\n\
The 'all' keyword indicates to trace all classes. This is not\n\
recommended as it is extremely slow.\n\
With <thread-id> filter, only methods run in that thread are\n\
shown. The <thread-id> can be a thread number or a thread name.\n\
The default is to include all threads.\n\
\n\
See also: brkinfo, clear, disable, enable

######################################################################
unaliasHelp = Syntax: unalias <name>\n\
Removes the command alias by the given name.\n\
\n\
See also: alias

######################################################################
unmonitorHelp = Syntax: unmonitor <monitor-number> ...|all\n\
\n\
Removes the monitor given by the monitor number(s).\n\
With the 'all' argument, all monitors are removed.\n\
The monitor numbers are determined by invoking the\n\
'monitor' command with no arguments.\n\
\n\
See also: monitor

######################################################################
upHelp = Syntax: up [<n-frames>]\n\
\n\
See also: down, frame

######################################################################
viewHelp = Syntax: view <file>|<class> [first-line] [last-line]\n\
First tries to find <class> using the classpath and sourcepath.\n\
If class is not found, tries to find file using the given name.\n\
Optional line arguments show the given range of lines.\n\
\n\
See also: list

######################################################################
vminfoHelp = Syntax: vminfo\n\
With an active debugging session and a thread set as the current,\n\
this command will display several pieces of information regarding\n\
the debuggee JVM.\n\
\n\
See also: thread

######################################################################
watchHelp = Syntax: watch [go|thread] <field> [access|modify] [<obj>]\n\
The 'go' and 'thread' options control which threads in the VM\n\
are suspended when the event occurs. 'go' suspends no threads,\n\
and 'thread' suspends only the event thread.\n\
The default is for all threads in the debuggee to suspend.\n\
\n\
Named field must be visible in the current stack frame,\n\
otherwise an error is issued and the breakpoint is disabled.\n\
If this occurs, enable the breakpoint when the field is\n\
visible in the current stack frame.\n\
\n\
If 'access' is given, stops only when field is accessed.\n\
If 'modify' is given, stops only when field is modified.\n\
By default, stops when field is accessed or modified.\n\
\n\
If the optional object reference expression is provided, it\n\
limits the watchpoint events to changes in that object instance.\n\
Once the session has deactivated, the instance filter is erased.\n\
\n\
See also: fields

######################################################################
whereHelp = Syntax: where [<thread-id>|all]\n\
Displays the call stack of the given thread.\n\
Defaults to displaying the stack of the current thread.\n\
Use the 'all' keyword to show the stack of all threads.\n\
\n\
See also: threads


######################################################################
#                       Command messages
######################################################################

alias.defined = Alias successfully defined:
alias.undefined = Alias not found:

apropos.errorCommandList = Internal error: 'commands' list missing
apropos.notfound = No matching commands found.

attach.attachingTo = Attaching to debuggee at
attach.failed = Attach to debuggee failed.
attach.missingPort = Remote port number is undefined.
attach.missingShare = Remote share name is undefined.

brkinfo.badbrk = Invalid breakpoint number format.
brkinfo.brkgrp = Breakpoint group:
brkinfo.classFilters = Class filters:
brkinfo.conditions = Conditions:
brkinfo.disabled = Breakpoint is disabled.
brkinfo.enabled = Breakpoint is enabled.
brkinfo.expired = Breakpoint has expired.
brkinfo.expires = Breakpoint expires after this many hits:
brkinfo.monitors = Monitors:
brkinfo.nobrk = No such breakpoint number.
brkinfo.resolved = Breakpoint has been resolved.
brkinfo.skipping = Breakpoint is skipping.
brkinfo.skips = Breakpoint skips this many hits:
brkinfo.threadFilters = Thread filters:
brkinfo.unresolved = Breakpoint is not resolved.

# Shown in the list of breakpoints.
brkinfo.breakpointList = Breakpoints:
brkinfo.noBreakpointsDefined = No breakpoints defined.

# Breakpoint status shown in the breakpoint list.
brkinfo.disabledInBrackets = [disabled]
brkinfo.enabledInBrackets = [enabled]
brkinfo.expiredInBrackets = [expired]
brkinfo.skippingInBrackets = [skipping]
brkinfo.unresolvedInBrackets = [unresolved]

brkmon.added = Monitor added.
brkmon.badaction = Unknown monitor action.
brkmon.badbrk = Invalid breakpoint number format.
brkmon.nobrk = No such breakpoint number.
brkmon.nomon = No such monitor found.
brkmon.removed = Monitor removed.

bytecodes.badcode = Invalid byte code in .class file.
bytecodes.opsfor = Opcodes for method
bytecodes.nofile = No .class file found: output likely to be broken.
bytecodes.nomatch = No matching classes or methods found.
bytecodes.nosupport = VM does not support getting bytecodes.

capture.file = Capturing to named file:
capture.fileNotFound = File not found exception occurred.
capture.missingFilename = Missing required file name.
capture.none = Capture is not enabled.
capture.readOnlyFile = Named file exists and is read-only.
capture.stdout = Capturing to standard output.
capture.unknownType = Cannot capture to

catch.added = Catch added.
catch.badClassName = Malformed class specification

class.nomatch = No matching class found.

classbrk.breakpointAdded = Class breakpoint added.

classes.noClassLoader = no class loader
classes.noneLoaded = No matching classes loaded.

classpath.active = Cannot set classpath while actively debugging.
classpath.nopath = No classpath has been defined.
classpath.path = Class path:
classpath.set = Class path set.

# Shown when clear command deletes a set of breakpoints.
clear.breakpointsDeleted = Breakpoint(s) deleted.

condition.added = Condition added.
condition.badaction = Unknown condition action.
condition.badbrk = Invalid breakpoint number format.
condition.nobrk = No such breakpoint number.
condition.nocond = No such condition found.
condition.removed = Condition removed.

disable.breakpointsDisabled = Breakpoint(s) disabled.

disablegc.collectionDisabled = Garbage collection disabled.

elements.isNull = Referenced object is null.
elements.mapNoIndex = Warning: maps have no indices; start/end ignored.
elements.whatIsIt = Referenced object is not a Collection.

enable.breakpointsEnabled = Breakpoint(s) enabled.

enablegc.collectionEnabled = Garbage collection enabled.

exclude.added = added to exclusion list.
exclude.list = Excluded classes:
exclude.none = No classes excluded.
exclude.notfound = not in exclusion filter set.
exclude.removed = removed from exclusion list.

fields.nomatch = No matching classes found.

filter.added = Filter added.
filter.badaction = Unknown filter action.
filter.badbrk = Invalid breakpoint number format.
filter.badtype = Invalid filter type.
filter.nobrk = No such breakpoint number.
filter.nofilter = No such filter found.
filter.removed = Filter removed.

help.atTopAlready = Cannot go any higher than 'top'.
help.doneInteractive = Exiting help.
help.helpFor = Help for
help.invalidCategory = Invalid category selection.
help.isaAlias = is an alias defined as follows:
help.separator = ============================================================
help.unknownCommand = Unknown command, alias, or help category.

history.invalidRange = Size must be between 0 and 1000.
history.invalidSize = Size must be a natural number.
history.sizeSet = History limit set.

hotswap.circularity = Class circularity:
hotswap.errorReadingFile = Error reading file:
hotswap.fileNotFound = File not found.
hotswap.formatError = Class format error:
hotswap.noAddMethod = Cannot add methods to class definition in this JVM.
hotswap.noHotSwap = Hot swapping not available in this JVM.
hotswap.noSuchClass = Named class not loaded in debuggee.
hotswap.noUnrestricted = Restricted hot swapping; see help.
hotswap.success = Class successfully redefined.
hotswap.unsupported = Hot swapping operation is unsupported.
hotswap.verifyError = Verification error:
hotswap.versionError = Class version error:
hotswap.wrongClass = Byte code does not correspond to named class.

invoke.ambiguousClass = Ambiguous class specification.
invoke.ambiguousMethod = Ambiguous method specification.
invoke.badThreadState = Current thread not suspended.
invoke.badVarOrClass = Unknown variable reference or class name.
invoke.malformedArgument = Malformed argument.
invoke.malformedArguments = Malformed argument list.
invoke.malformedMethod = Malformed method specification. See 'help invoke'.
invoke.noSuchMethod = No such method.
invoke.notaClass = Specified class is an array or interface.
invoke.unknownArgument = Argument not understood.
invoke.unknownLocation = Current location not set. Must specify class name.

lines.invalidLoaderId = Invalid classloader identifier (must be a long).
lines.noLineNumberInfo = There is no line number information for this class.

list.invalidCount = Invalid count number format.
list.missingCount = Missing count value.
list.noShowFile = UI adapter cannot show file contents.

listen.disconnecting = listen: Session already active! Disconnecting from remote VM...
listen.listeningOn = Listening on
listen.noConnectorFound = No connector found for transport type:

load.missingClass = The load/run command requires a class name.

locals.noneFound = No visible variables.

locks.monitorInfoFor = Monitor information for
locks.notOwned = Not owned
locks.ownedBy = Owned by:
locks.entryCount = entry count:
locks.noWaiters = No waiters
locks.uoe = Operation not supported in the HotSpot VM.
locks.waitingThread = Waiting thread:

logging.cat.breakpoint = Breakpoints       [breakpoint]:
logging.cat.event =      JDI events        [event]     :
logging.cat.monitor =    Monitors          [monitor]   :
logging.cat.session =    Session           [session]   :
logging.cat.sesslist =   Session listeners [sesslist]  :
logging.cat.view =       Views             [view]      :
logging.cat.help =       Help viewer       [help]      :
logging.disabled = Logging category disabled.
logging.enabled = Logging category enabled.
logging.off = off
logging.on = on
logging.error.cat.unknown = Unknown category:

monitor.added = Monitor added.
monitor.list = Defined monitors:
monitor.none = No monitors defined.

options.listOfOptions = List of available options.
options.set = Option value set.
options.unknownOption = Option by that name is not available.

print.arrayBounds = Array index out of bounds.

props.listOfProperties = Session properties:
props.sessionError = Session property backing store error.
props.set = Session property set.

resume.threadResumed = Thread(s) resumed.

run.tryLoadInstead = Try using the 'load' command instead.

set.invalidType = Invalid type on right-hand side of assignment:
set.missingEquals = Missing equals sign between lvalue and rvalue.
set.nocomposite = Cannot set composite object.
set.wrongType = Right-side value is incompatible with left side type:

sourcepath.nopath = No sourcepath has been defined.
sourcepath.path = Source path:
sourcepath.set = Source path set:

stdin.remoteDebuggee = The debuggee is remote and input cannot be sent to it.

stop.breakpointAdded = Breakpoint added.

support.canAddMethod = Can add methods to redefined classes.
support.canGetBytecodes = Can retrieve method bytecodes.
support.canGetCurrentContendedMonitor = Can get current contended monitor.
support.canGetMonitorInfo = Can get monitor information.
support.canGetOwnedMonitorInfo = Can get owned monitor information.
support.canGetSourceDebugExtension = Can get source debug extension.
support.canGetSyntheticAttribute = Can get synthetic class attributes.
support.canPopFrames = Can pop frames from stacks.
support.canRedefineClasses = Can redefine classes, with restrictions.
support.canRequestVMDeathEvent = Can request VM death event.
support.canUnrestrictedlyRedefineClasses = Can unrestrictedly redefine classes.
support.canUseInstanceFilters = Can use instance filters.
support.canWatchFieldAccess = Can watch field access.
support.canWatchFieldModification = Can watch field modification.

support.cannotAddMethod = Cannot add methods to redefined classes.
support.cannotGetBytecodes = Cannot retrieve method bytecodes.
support.cannotGetCurrentContendedMonitor = Cannot get current contended monitor.
support.cannotGetMonitorInfo = Cannot get monitor information.
support.cannotGetOwnedMonitorInfo = Cannot get owned monitor information.
support.cannotGetSourceDebugExtension = Cannot get source debug extension.
support.cannotGetSyntheticAttribute = Cannot get synthetic class attributes.
support.cannotPopFrames = Cannot pop frames from stacks.
support.cannotRedefineClasses = Cannot redefine classes, with restrictions.
support.cannotRequestVMDeathEvent = Cannot request VM death event.
support.cannotUnrestrictedlyRedefineClasses = Cannot unrestrictedly redefine classes.
support.cannotUseInstanceFilters = Cannot use instance filters.
support.cannotWatchFieldAccess = Cannot watch field access.
support.cannotWatchFieldModification = Cannot watch field modification.

suspend.threadSuspended = Thread(s) suspended.

thread.currentThread = Current thread:

threadbrk.breakpointAdded = Thread breakpoint added.

threadlocks.monitorInfo = Monitor information for thread
threadlocks.noMonitors = No monitors owned
threadlocks.notWaiting = Not waiting for a monitor
threadlocks.ownedMonitor = Owned monitor:
threadlocks.waitingFor = Waiting for monitor:
threadlocks.uoe = Operation not supported in HotSpot VM.

threads.noThreads = No threads exist.
threads.noThreadsInGroup = No threads in the specified group.

trace.traceAdded = Trace added.

unalias.removed = Alias deleted.
unalias.undefined = Alias not found:

unmonitor.badnum = Invalid monitor number:
unmonitor.nomon = No monitor by that number:
unmonitor.removed = Monitor(s) removed.

view.invalidLine = Invalid line number:
view.noShowFile = UI adapter cannot show file contents.

vminfo.basedir = Base path directory:
vminfo.bcpath = Boot classpath:
vminfo.cpath = Classpath:
vminfo.numprocs = Number of processors:
vminfo.freemem = Free memory:
vminfo.maxmem = Maximum memory:
vminfo.stratum = Default stratum:
vminfo.totalmem = Total memory:
vminfo.nothread = Set current thread to get additional information.

watch.disabledForNow1 = Unable to resolve watchpoint now.
watch.disabledForNow2 = Enable when the current location is set.
watch.exprNotObject = Expression must resolve to an object reference.
watch.unexpectedArg = Received unexpected command argument. See command help.
watch.watchAdded = Watch breakpoint added.

where.emptyStack = (empty stack)
